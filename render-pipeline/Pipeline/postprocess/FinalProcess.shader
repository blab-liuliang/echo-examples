<?xml version="1.0" encoding="utf-8"?>
<res class="ShaderProgram" path="Res://pipeline/postprocess/FinalProcess.shader" Type="glsl" VertexShader="#version 450&#10;&#10;layout(binding = 0, std140) uniform UBO&#10;{&#10;    mat4 u_WorldMatrix;&#10;    mat4 u_ViewProjMatrix;&#10;} vs_ubo;&#10;&#10;layout(location = 0) in vec3 a_Position;&#10;layout(location = 7) out vec2 v_UV;&#10;layout(location = 4) in vec2 a_UV;&#10;&#10;void main()&#10;{&#10;    vec4 worldPosition = vs_ubo.u_WorldMatrix * vec4(a_Position, 1.0);&#10;    vec4 clipPosition = vs_ubo.u_ViewProjMatrix * worldPosition;&#10;    gl_Position = clipPosition;&#10;    v_UV = a_UV;&#10;}&#10;&#10;" FragmentShader="#version 450&#10;&#10;layout(binding = 1) uniform sampler2D Albedo;&#10;layout(binding = 2) uniform sampler2D BloomBright;&#10;&#10;layout(location = 7) in vec2 v_UV;&#10;layout(location = 0) out vec4 o_FragColor;&#10;&#10;vec3 GaussianBlur(sampler2D tex, vec2 uv, float radius, float dirs, float samples, float strength)&#10;{&#10;    float _step = (1.0 / samples) * radius;&#10;    vec4 origin = texture(tex, uv);&#10;    vec4 color = origin;&#10;    float count = 1.0;&#10;    for (float pi = 6.283185482025146484375, directions = dirs, d = 0.0; d &lt; pi; d += (pi / directions))&#10;    {&#10;        for (float i = 1.0; i &lt;= samples; i += 1.0)&#10;        {&#10;            color += texture(tex, uv + ((vec2(cos(d), sin(d)) * _step) * i));&#10;            count += 1.0;&#10;        }&#10;    }&#10;    color /= vec4(count);&#10;    return mix(origin.xyz, color.xyz, vec3(strength));&#10;}&#10;&#10;vec3 SRgbToLinear(vec3 sRgb)&#10;{&#10;    return pow(sRgb, vec3(2.2000000476837158203125));&#10;}&#10;&#10;vec3 ToneMapping(vec3 hdrColor, float exposure)&#10;{&#10;    vec3 x = max(vec3(0.0), hdrColor - vec3(0.0040000001899898052215576171875));&#10;    vec3 retColor = (x * ((x * 6.19999980926513671875) + vec3(0.5))) / ((x * ((x * 6.19999980926513671875) + vec3(1.7000000476837158203125))) + vec3(0.0599999986588954925537109375));&#10;    return retColor;&#10;}&#10;&#10;void main()&#10;{&#10;    vec4 Albedo_Color = texture(Albedo, v_UV);&#10;    float Float_185_Value = 1.0;&#10;    float Float_189_Value = 0.00999999977648258209228515625;&#10;    float Float_190_Value = 8.0;&#10;    float Float_191_Value = 8.0;&#10;    float Float_196_Value = 1.0;&#10;    vec2 param = v_UV;&#10;    float param_1 = Float_189_Value;&#10;    float param_2 = Float_190_Value;&#10;    float param_3 = Float_191_Value;&#10;    float param_4 = Float_185_Value;&#10;    vec3 GaussianBlur_187 = GaussianBlur(BloomBright, param, param_1, param_2, param_3, param_4);&#10;    vec3 param_5 = GaussianBlur_187;&#10;    vec3 SRgbToLinear_199 = SRgbToLinear(param_5);&#10;    vec3 param_6 = Albedo_Color.xyz;&#10;    vec3 SRgbToLinear_200 = SRgbToLinear(param_6);&#10;    vec3 Addition_194 = SRgbToLinear_200 + SRgbToLinear_199;&#10;    vec3 param_7 = Addition_194;&#10;    float param_8 = Float_196_Value;&#10;    vec3 GLSL_195 = ToneMapping(param_7, param_8);&#10;    vec3 _BaseColor = GLSL_195;&#10;    float _Opacity = 1.0;&#10;    float _Metalic = 0.20000000298023223876953125;&#10;    float _PerceptualRoughness = 0.5;&#10;    o_FragColor = vec4(_BaseColor, _Opacity);&#10;}&#10;&#10;" Graph="{&#10;    &quot;connections&quot;: [&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 3,&#10;            &quot;out_id&quot;: &quot;{bd943406-9c6b-430c-9339-de8328a9d83e}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{1893c0bc-dffb-43e7-aa2f-51cbbe675e38}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{8da50af0-c868-46b8-93d5-41e5e276a4f3}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{1a31f257-22c1-46fb-8cd9-102fe5768725}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{1f061e0d-26b9-4f2e-bfde-cba44378657c}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 4,&#10;            &quot;out_id&quot;: &quot;{f800ca23-1776-4e6e-8baf-88550122294b}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{1893c0bc-dffb-43e7-aa2f-51cbbe675e38}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{84c5b1fa-b5ee-474b-9b79-37ba2bf5a375}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 2,&#10;            &quot;out_id&quot;: &quot;{4b8c4e09-9d93-410c-93a2-1b5279ccc818}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;in_index&quot;: 5,&#10;            &quot;out_id&quot;: &quot;{49470f46-0393-4402-b6c1-a696d920cfa1}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{a4978485-2d2d-41a9-8195-0bfb4f05b047}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;B&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;vec3&quot;,&#10;                    &quot;name&quot;: &quot;vec3&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{84c5b1fa-b5ee-474b-9b79-37ba2bf5a375}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{a4978485-2d2d-41a9-8195-0bfb4f05b047}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{8304b338-0385-43c1-8bc5-94c2bac3c630}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{a11ff1c6-f5f1-42aa-8492-c7c50ea7fef8}&quot;,&#10;            &quot;out_index&quot;: 1&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;A&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;vec3&quot;,&#10;                    &quot;name&quot;: &quot;vec3&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{84c5b1fa-b5ee-474b-9b79-37ba2bf5a375}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{8304b338-0385-43c1-8bc5-94c2bac3c630}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{5c2c52da-edae-4345-83a7-466fe2e8ed12}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{1893c0bc-dffb-43e7-aa2f-51cbbe675e38}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        }&#10;    ],&#10;    &quot;nodes&quot;: [&#10;        {&#10;            &quot;id&quot;: &quot;{5c2c52da-edae-4345-83a7-466fe2e8ed12}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Variable&quot;: &quot;ShaderTemplate_184&quot;,&#10;                &quot;name&quot;: &quot;ShaderTemplate&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: 427,&#10;                &quot;y&quot;: 97&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{a11ff1c6-f5f1-42aa-8492-c7c50ea7fef8}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Atla&quot;: &quot;false&quot;,&#10;                &quot;Texture&quot;: &quot;Res://pipeline/gbuffer/GBufferColor0.rt&quot;,&#10;                &quot;Type&quot;: &quot;General&quot;,&#10;                &quot;Variable&quot;: &quot;Albedo&quot;,&#10;                &quot;name&quot;: &quot;Texture&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -499,&#10;                &quot;y&quot;: 9&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{49470f46-0393-4402-b6c1-a696d920cfa1}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Value&quot;: &quot;1.0&quot;,&#10;                &quot;Variable&quot;: &quot;Float_185&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -811,&#10;                &quot;y&quot;: 509&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{bb5ce516-b449-4e6f-9eda-f6fee8f008b6}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 GaussianBlur(sampler2D tex,vec2 uv, float radius, float dirs, float samples, float strength)\n{\n\t// https://www.shadertoy.com/view/Xltfzj\n\tfloat pi = 6.28318530718;\n\tfloat directions = dirs;\t// blur directions (default 16.0 - more is better but slower)\n\tfloat step = 1.0 / samples * radius;\n\tvec4 origin = texture(tex, uv);\n\tvec4 color = origin;\n\tfloat count = 1.0;\n\t\n\tfor (float d = 0.0; d &lt; pi; d += pi / directions)\n\t{\n\t\tfor (float i = 1.0; i &lt;= samples; i += 1.0)\n\t\t{\n\t\t\tcolor += texture(tex, uv + vec2(cos(d), sin(d)) * step * i);\n\t\t\tcount += 1.0;\n\t\t}\n\t}\n\n\tcolor /= count;\n\n\treturn mix(origin.xyz, color.xyz, strength);\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;GaussianBlur&quot;,&#10;                &quot;Parameters&quot;: &quot;sampler2D tex,vec2 uv, float radius, float dirs, float samples, float strength&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;Variable&quot;: &quot;GaussianBlur_187&quot;,&#10;                &quot;name&quot;: &quot;GaussianBlur&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -465,&#10;                &quot;y&quot;: 203&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{1a31f257-22c1-46fb-8cd9-102fe5768725}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Attribute&quot;: &quot;uv0&quot;,&#10;                &quot;Variable&quot;: &quot;VertexAttribute_188&quot;,&#10;                &quot;name&quot;: &quot;VertexAttribute&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -884,&#10;                &quot;y&quot;: 227&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{4b8c4e09-9d93-410c-93a2-1b5279ccc818}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Value&quot;: &quot;0.00999&quot;,&#10;                &quot;Variable&quot;: &quot;Float_189&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -805,&#10;                &quot;y&quot;: 311&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{bd943406-9c6b-430c-9339-de8328a9d83e}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Value&quot;: &quot;8.0&quot;,&#10;                &quot;Variable&quot;: &quot;Float_190&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -802,&#10;                &quot;y&quot;: 379&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{f800ca23-1776-4e6e-8baf-88550122294b}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Value&quot;: &quot;8.0&quot;,&#10;                &quot;Variable&quot;: &quot;Float_191&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -811,&#10;                &quot;y&quot;: 444&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{1f061e0d-26b9-4f2e-bfde-cba44378657c}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Atla&quot;: &quot;false&quot;,&#10;                &quot;Texture&quot;: &quot;Res://pipeline/postprocess/bloom/BloomBrightColor.rt&quot;,&#10;                &quot;Type&quot;: &quot;General&quot;,&#10;                &quot;Variable&quot;: &quot;BloomBright&quot;,&#10;                &quot;name&quot;: &quot;Texture&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -827,&#10;                &quot;y&quot;: 85&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{84c5b1fa-b5ee-474b-9b79-37ba2bf5a375}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Variable&quot;: &quot;Addition_194&quot;,&#10;                &quot;name&quot;: &quot;Addition&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -27,&#10;                &quot;y&quot;: 96&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{1893c0bc-dffb-43e7-aa2f-51cbbe675e38}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 ToneMapping(vec3 hdrColor, float exposure)\n{\n\t// http://filmicworlds.com/blog/filmic-tonemapping-operators/\n\tvec3 x = max(vec3(0), hdrColor-vec3(0.004));\n\tvec3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);\n   \n\treturn retColor;\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;ToneMapping&quot;,&#10;                &quot;Parameters&quot;: &quot;vec3 hdrColor, float exposure&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;Variable&quot;: &quot;GLSL_195&quot;,&#10;                &quot;name&quot;: &quot;GLSL&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: 200,&#10;                &quot;y&quot;: 97&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{8da50af0-c868-46b8-93d5-41e5e276a4f3}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Value&quot;: &quot;1.0&quot;,&#10;                &quot;Variable&quot;: &quot;Float_196&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -44,&#10;                &quot;y&quot;: 227&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{a4978485-2d2d-41a9-8195-0bfb4f05b047}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 SRgbToLinear(vec3 sRgb)\n{\n\treturn pow(sRgb, vec3(2.2));\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;SRgbToLinear&quot;,&#10;                &quot;Parameters&quot;: &quot;vec3 sRgb&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;Variable&quot;: &quot;SRgbToLinear_199&quot;,&#10;                &quot;name&quot;: &quot;SRgbToLinear&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -225,&#10;                &quot;y&quot;: 187&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{8304b338-0385-43c1-8bc5-94c2bac3c630}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 SRgbToLinear(vec3 sRgb)\n{\n\treturn pow(sRgb, vec3(2.2));\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;SRgbToLinear&quot;,&#10;                &quot;Parameters&quot;: &quot;vec3 sRgb&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;Variable&quot;: &quot;SRgbToLinear_200&quot;,&#10;                &quot;name&quot;: &quot;SRgbToLinear&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -221,&#10;                &quot;y&quot;: 85&#10;            }&#10;        }&#10;    ]&#10;}&#10;" CullMode="CULL_BACK" BlendMode="Opaque" Uniforms.Albedo="Res://pipeline/gbuffer/GBufferColor0.rt" Uniforms.BloomBright="Res://pipeline/postprocess/bloom/BloomBrightColor.rt" />
