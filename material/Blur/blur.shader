<?xml version="1.0" encoding="utf-8"?>
<res class="ShaderProgram" path="Res://Blur/blur.shader" Type="glsl" VertexShader="#version 450&#10;&#10;layout(binding = 0, std140) uniform UBO&#10;{&#10;    mat4 u_WorldMatrix;&#10;    mat4 u_ViewProjMatrix;&#10;} vs_ubo;&#10;&#10;layout(location = 0) in vec3 a_Position;&#10;layout(location = 7) out vec2 v_UV;&#10;layout(location = 4) in vec2 a_UV;&#10;&#10;void main()&#10;{&#10;    vec4 worldPosition = vs_ubo.u_WorldMatrix * vec4(a_Position, 1.0);&#10;    vec4 clipPosition = vs_ubo.u_ViewProjMatrix * worldPosition;&#10;    gl_Position = clipPosition;&#10;    v_UV = a_UV;&#10;}&#10;&#10;" FragmentShader="#version 450&#10;&#10;layout(binding = 1) uniform sampler2D Albedo;&#10;layout(binding = 2) uniform sampler2D Mask;&#10;&#10;layout(location = 7) in vec2 v_UV;&#10;layout(location = 0) out vec4 o_FragColor;&#10;&#10;vec3 SRgbToLinear(vec3 srgbIn)&#10;{&#10;    return srgbIn;&#10;}&#10;&#10;vec3 GaussianBlur(sampler2D tex, vec2 uv, float radius, float dirs, float quality, float strength)&#10;{&#10;    float step_radius = radius / 512.0;&#10;    vec4 origin = texture(tex, uv);&#10;    vec4 color = origin;&#10;    float count = 1.0;&#10;    for (float pi = 6.283185482025146484375, directions = dirs, d = 0.0; d &lt; pi; d += (pi / directions))&#10;    {&#10;        for (float i = 1.0 / quality; i &lt;= 1.0; i += (1.0 / quality))&#10;        {&#10;            color += texture(tex, uv + ((vec2(cos(d), sin(d)) * step_radius) * i));&#10;            count += 1.0;&#10;        }&#10;    }&#10;    color /= vec4(count);&#10;    return mix(origin.xyz, color.xyz, vec3(strength));&#10;}&#10;&#10;vec3 RadialBlur(sampler2D tex, vec2 uv, vec2 center, float quality, float strength)&#10;{&#10;    vec2 dir = (center - uv) / vec2(quality);&#10;    vec4 origin = texture(tex, uv);&#10;    vec4 color = origin;&#10;    float count = 1.0;&#10;    for (float i = 1.0; i &lt;= quality; i += 1.0)&#10;    {&#10;        color += texture(tex, uv + (dir * i));&#10;        count += 1.0;&#10;    }&#10;    color /= vec4(count);&#10;    return mix(origin.xyz, color.xyz, vec3(strength));&#10;}&#10;&#10;vec3 LinearToSRgb(vec3 linearIn)&#10;{&#10;    return linearIn;&#10;}&#10;&#10;void main()&#10;{&#10;    vec4 Albedo_Color = texture(Albedo, v_UV);&#10;    vec3 param = Albedo_Color.xyz;&#10;    vec3 _182 = SRgbToLinear(param);&#10;    Albedo_Color = vec4(_182.x, _182.y, _182.z, Albedo_Color.w);&#10;    vec4 Mask_Color = texture(Mask, v_UV);&#10;    vec3 param_1 = Mask_Color.xyz;&#10;    vec3 _193 = SRgbToLinear(param_1);&#10;    Mask_Color = vec4(_193.x, _193.y, _193.z, Mask_Color.w);&#10;    vec2 Vector2_31_Value = vec2(0.5);&#10;    float Float_36_Value = 8.0;&#10;    vec4 Vector4_37_Value = vec4(16.0, 16.0, 8.0, 1.0);&#10;    float Float_40_Value = 1.0;&#10;    float Float_42_Value = 0.5;&#10;    float Substraction_41 = Float_40_Value - Mask_Color.w;&#10;    vec2 param_2 = v_UV;&#10;    float param_3 = Vector4_37_Value.x;&#10;    float param_4 = Vector4_37_Value.y;&#10;    float param_5 = Vector4_37_Value.z;&#10;    float param_6 = Vector4_37_Value.w;&#10;    vec3 GaussianBlur_118 = GaussianBlur(Albedo, param_2, param_3, param_4, param_5, param_6);&#10;    float Pow_38 = pow(Substraction_41, Float_42_Value);&#10;    vec2 param_7 = v_UV;&#10;    vec2 param_8 = Vector2_31_Value;&#10;    float param_9 = Float_36_Value;&#10;    float param_10 = Pow_38;&#10;    vec3 RadialBlur_116 = RadialBlur(Albedo, param_7, param_8, param_9, param_10);&#10;    vec3 _BaseColor = RadialBlur_116;&#10;    float _Opacity = 1.0;&#10;    float _Metalic = 0.20000000298023223876953125;&#10;    float _PerceptualRoughness = 0.5;&#10;    vec3 param_11 = _BaseColor;&#10;    o_FragColor = vec4(LinearToSRgb(param_11), _Opacity);&#10;}&#10;&#10;" Graph="{&#10;    &quot;connections&quot;: [&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;B&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;float&quot;,&#10;                    &quot;name&quot;: &quot;float&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{60307317-7d5f-42d7-b41a-640d192a1ee5}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{a938660f-8968-4177-9378-4bc4f202f05c}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 5,&#10;            &quot;out_id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;out_index&quot;: 3&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;any&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;vec4&quot;,&#10;                    &quot;name&quot;: &quot;vec4&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{3d94b8c2-e3f3-486e-9ab1-e12c78d9ec9f}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{831c51b6-ccae-4af6-b402-f4b6fd8397e5}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;in_index&quot;: 3,&#10;            &quot;out_id&quot;: &quot;{dd0b17aa-4516-4113-b75d-8af58a042706}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 4,&#10;            &quot;out_id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;out_index&quot;: 2&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;in_index&quot;: 2,&#10;            &quot;out_id&quot;: &quot;{b3811dd9-b095-401e-b5ad-4c30d6234dcf}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{8b0caea3-a688-465f-9841-ce8cc3f32bd7}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{831c51b6-ccae-4af6-b402-f4b6fd8397e5}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 2,&#10;            &quot;out_id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;in_index&quot;: 3,&#10;            &quot;out_id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;out_index&quot;: 1&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{8b0caea3-a688-465f-9841-ce8cc3f32bd7}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;A&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;float&quot;,&#10;                    &quot;name&quot;: &quot;float&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{d514a63b-0c47-4439-85d3-50515846db23}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{59512ae1-9309-49e4-b71b-ffa24fa50161}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;A&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;float&quot;,&#10;                    &quot;name&quot;: &quot;float&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{60307317-7d5f-42d7-b41a-640d192a1ee5}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{d514a63b-0c47-4439-85d3-50515846db23}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;converter&quot;: {&#10;                &quot;in&quot;: {&#10;                    &quot;id&quot;: &quot;any&quot;,&#10;                    &quot;name&quot;: &quot;B&quot;&#10;                },&#10;                &quot;out&quot;: {&#10;                    &quot;id&quot;: &quot;float&quot;,&#10;                    &quot;name&quot;: &quot;a&quot;&#10;                }&#10;            },&#10;            &quot;in_id&quot;: &quot;{d514a63b-0c47-4439-85d3-50515846db23}&quot;,&#10;            &quot;in_index&quot;: 1,&#10;            &quot;out_id&quot;: &quot;{514e8e93-9e94-49b6-aab1-267f7ec0985b}&quot;,&#10;            &quot;out_index&quot;: 2&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;in_index&quot;: 4,&#10;            &quot;out_id&quot;: &quot;{60307317-7d5f-42d7-b41a-640d192a1ee5}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        },&#10;        {&#10;            &quot;in_id&quot;: &quot;{b7f7e787-366b-4d5a-b8f5-2168aa67d467}&quot;,&#10;            &quot;in_index&quot;: 0,&#10;            &quot;out_id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;out_index&quot;: 0&#10;        }&#10;    ],&#10;    &quot;nodes&quot;: [&#10;        {&#10;            &quot;id&quot;: &quot;{831c51b6-ccae-4af6-b402-f4b6fd8397e5}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Export&quot;: &quot;true&quot;,&#10;                &quot;isAtla&quot;: &quot;false&quot;,&#10;                &quot;name&quot;: &quot;Texture&quot;,&#10;                &quot;texture&quot;: &quot;Res://Blur/albedo.png&quot;,&#10;                &quot;type&quot;: &quot;General&quot;,&#10;                &quot;variableName&quot;: &quot;Albedo&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -586,&#10;                &quot;y&quot;: 132&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{514e8e93-9e94-49b6-aab1-267f7ec0985b}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Export&quot;: &quot;true&quot;,&#10;                &quot;isAtla&quot;: &quot;false&quot;,&#10;                &quot;name&quot;: &quot;Texture&quot;,&#10;                &quot;texture&quot;: &quot;Res://Blur/circle-mask.png&quot;,&#10;                &quot;type&quot;: &quot;General&quot;,&#10;                &quot;variableName&quot;: &quot;Mask&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -954,&#10;                &quot;y&quot;: 758&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{b7f7e787-366b-4d5a-b8f5-2168aa67d467}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;ShaderTemplate&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: 78,&#10;                &quot;y&quot;: 524&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{b3811dd9-b095-401e-b5ad-4c30d6234dcf}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;Vector2&quot;,&#10;                &quot;number&quot;: &quot;0.5 0.5&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -517,&#10;                &quot;y&quot;: 633&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{2bfcf37e-0e3c-4455-9026-9f704aba8e26}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 RadialBlur(sampler2D tex, vec2 uv,vec2 center, float quality, float strength)\n{\n\t// https://gaming.stackexchange.com/questions/306721/what-is-radial-blur\n\tvec2 dir = (center - uv) / quality;\n\tvec4 origin = texture(tex, uv);\n\tvec4 color = origin;\n\tfloat count = 1.0;\n\t\n\tfor (float i = 1.0; i &lt;= quality; i += 1.0)\n\t{\n\t\tcolor += texture(tex, uv + dir * i);\n\t\tcount += 1.0;\n\t}\n\n\tcolor /= count;\n\n\treturn mix(origin.xyz, color.xyz, strength);\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;RadialBlur&quot;,&#10;                &quot;Parameters&quot;: &quot;sampler2D tex, vec2 uv,vec2 center, float quality, float strength&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;name&quot;: &quot;RadialBlur&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -219,&#10;                &quot;y&quot;: 524&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{8b0caea3-a688-465f-9841-ce8cc3f32bd7}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;VertexAttribute&quot;,&#10;                &quot;option&quot;: &quot;uv0&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -643,&#10;                &quot;y&quot;: 277&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{dd0b17aa-4516-4113-b75d-8af58a042706}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Export&quot;: &quot;false&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;,&#10;                &quot;number&quot;: &quot;8.0&quot;,&#10;                &quot;variableName&quot;: &quot;Float_36&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -468,&#10;                &quot;y&quot;: 708&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{e3a8d1f4-22c5-426b-90c7-1aea5fd8687a}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Code&quot;: &quot;vec3 GaussianBlur(sampler2D tex,vec2 uv, float radius, float dirs, float quality, float strength)\n{\n\t// https://www.shadertoy.com/view/Xltfzj\n\tfloat pi = 6.28318530718;\n\tfloat directions = dirs;\t// blur directions (default 16.0 - more is better but slower)\n\tfloat step_radius = radius / 512.0;\t// blur radius\n\n\tvec4 origin = texture(tex, uv);\n\tvec4 color = origin;\n\tfloat count = 1.0;\n\t\n\tfor (float d = 0.0; d &lt; pi; d += pi / directions)\n\t{\n\t\tfor (float i = 1.0 / quality; i &lt;= 1.0; i += 1.0 / quality)\n\t\t{\n\t\t\tcolor += texture(tex, uv + vec2(cos(d), sin(d)) * step_radius * i);\n\t\t\tcount += 1.0;\n\t\t}\n\t}\n\n\tcolor /= count;\n\n\treturn mix(origin.xyz, color.xyz, strength);\n}&quot;,&#10;                &quot;FunctionName&quot;: &quot;GaussianBlur&quot;,&#10;                &quot;Parameters&quot;: &quot;sampler2D tex,vec2 uv, float radius, float dirs, float quality, float strength&quot;,&#10;                &quot;ReturnType&quot;: &quot;vec3&quot;,&#10;                &quot;name&quot;: &quot;GaussianBlur&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -227,&#10;                &quot;y&quot;: 260&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{3d94b8c2-e3f3-486e-9ab1-e12c78d9ec9f}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;Vector4&quot;,&#10;                &quot;number&quot;: &quot;16 16 8 1&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -838,&#10;                &quot;y&quot;: 372&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{a84cfa6c-2441-49e7-bad7-10ab74fa4ca6}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;Split&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -504,&#10;                &quot;y&quot;: 359&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{60307317-7d5f-42d7-b41a-640d192a1ee5}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;Pow&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -424,&#10;                &quot;y&quot;: 794&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{59512ae1-9309-49e4-b71b-ffa24fa50161}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Export&quot;: &quot;false&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;,&#10;                &quot;number&quot;: &quot;1.0&quot;,&#10;                &quot;variableName&quot;: &quot;Float_40&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -751,&#10;                &quot;y&quot;: 781&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{d514a63b-0c47-4439-85d3-50515846db23}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;name&quot;: &quot;Substraction&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -576,&#10;                &quot;y&quot;: 796&#10;            }&#10;        },&#10;        {&#10;            &quot;id&quot;: &quot;{a938660f-8968-4177-9378-4bc4f202f05c}&quot;,&#10;            &quot;model&quot;: {&#10;                &quot;Export&quot;: &quot;false&quot;,&#10;                &quot;name&quot;: &quot;Float&quot;,&#10;                &quot;number&quot;: &quot;0.5&quot;,&#10;                &quot;variableName&quot;: &quot;Float_42&quot;&#10;            },&#10;            &quot;position&quot;: {&#10;                &quot;x&quot;: -611,&#10;                &quot;y&quot;: 911&#10;            }&#10;        }&#10;    ]&#10;}&#10;" CullMode="CULL_BACK" BlendMode="Opaque" Uniforms.Albedo="Res://Blur/albedo.png" Uniforms.Mask="Res://Blur/circle-mask.png" />
